#include "../prelude/combinators.ncc"

fixity pre 1 ♢
fixity lambda Π 
fixity lambda lam 

unsound tm : {S : tm ty} tm S → type
   | ty    = tm {S = ty} ty
   | ♢     = tm ty -> tm ty
   | Π     = [T : tm ty] (tm T → tm T) → tm $ ♢  T
   | raise = {T : tm ty} tm T → tm $ ♢  T
   | lam   = [T : tm ty][F : tm T → tm T] tm {S = ♢ T} (Π A : T . F A)


defn isTm     : {Kind : tm ty} {Ty : tm Kind} tm Ty -> type
   | hasValue = [S : tm ty][T : tm S][V : tm T] isTm V


query whattype0 = isTm { Kind = ty } { Ty = ♢ ty } ( Π A : ty . A)
query whattype1 = isTm (lam A : ty . A)
